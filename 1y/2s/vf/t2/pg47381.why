module BTree

use int.Int

type tree 'a = Empty | Node (tree 'a) 'a (tree 'a)
  
 let rec predicate memt (t : tree int) (x : int) =
  variant {t}
    match t with
     | Empty -> false
     | Node l e r -> e = x || memt l x || memt r x
    end   
  
let rec predicate leq (x : int) (t : tree int) =
  ensures { result <-> (forall k : int. memt t k -> x <= k)}
  variant {t}
 match t with
  | Empty -> true
  | Node l e r -> x <= e && leq x l && leq x r
 end
 
 let rec predicate geq (x : int) (t : tree int) =
  ensures { result <-> forall k : int. memt t k -> x >= k}
  variant {t}
  match t with
   | Empty -> true
   | Node l e r -> x >= e && geq x l && geq x r 
  end
  
                                     
let rec predicate sortedBT (t : tree int) = 
  variant {t}
  match t with 
   | Empty -> true
   | Node l e r -> sortedBT l && sortedBT r && geq e l && leq e r
  end
  
let rec ghost function sizeBT (t : tree 'a) : int =
  variant {t}
    match t with
     | Empty -> 0
     | Node l _ r -> sizeBT l + 1 + sizeBT r
    end
                      

let rec ghost function num_occBT (x : int) (t : tree int) : int =
  variant {t}
  ensures {(memt t x <-> result > 0) /\ (not (memt t x) <-> result = 0)}
   match t with 
    | Empty -> 0
    | Node l e r -> (if e = x then 1 else 0) + num_occBT x l + num_occBT x r 
   end

end


(* Test *)

module Ex1

use int.Int
use number.Gcd

let rec function euclid (u v : int) : int 
  requires {u > 0 /\ v > 0}
  ensures { result = Gcd.gcd u v }
  ensures { result <= u }
  ensures { result <= v }
  ensures { 0 < result }
  variant {u + v}
  = if u = v then u
    else 
      if u > v then euclid (u - v) v
      else euclid u (v - u) 

end


module Ex2 

use list.List
use list.SortedInt
use list.NumOcc
use list.Length
use BTree

val function tree_to_list (t : tree int) : list int
 requires {sortedBT t}
 ensures {sorted result}
 ensures {forall x : int. num_occBT x t = num_occ x result}
 ensures {sizeBT t = length result}
end

module ProvingEx2

use BTree
use list.List
use list.SortedInt
use list.NumOcc
use list.Length
use list.Append

 let rec function tree_to_list_ (t : tree int) : list int
  requires {sortedBT t}
  ensures {sorted result}
  ensures {forall x : int. num_occBT x t = num_occ x result}
  ensures {sizeBT t = length result}
  variant {t} 
  = match t with
    | Empty -> Nil
    | Node l e r -> tree_to_list_ l ++ (Cons e (tree_to_list_ r))
   end

clone Ex2 with val tree_to_list = tree_to_list_

end


module Ex4

    use int.Int
    use ref.Refint
    use array.Array
    use array.NumOfEq

    let most_frequent (a : array int) : int
        requires {length a > 0} 
        requires {forall i j : int. 0 <= i < j < (length a) -> a[i] <= a[j] }             
        ensures  { forall x : int. (numof a x 0 (length a))  <= (numof a result 0 (length a)) }
        ensures  { (numof a result 0 (length a)) > 0}
    = let ref r = a[0] in 
      let ref c = 1 in
      let ref m = 1 in 
      for i = 1 to length a - 1 do
        invariant {(forall j : int. 0 <= j < i -> (numof a a[j] 0 i) <= m /\ m = numof a r 0 i /\ c  <= m) /\ m <= length a}
        invariant {c = numof a a[i-1] 0 i}
        if a[i] = a[i-1] then begin
            incr c;
            if c > m then begin m <- c ; r <- a[i] end
        end else
            c <- 1
        done;
        r
        
end
